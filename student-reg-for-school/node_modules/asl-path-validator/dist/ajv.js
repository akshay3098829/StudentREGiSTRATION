"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerAll = exports.AslPathValidatorConfig = void 0;
const index_1 = require("./index");
const types_1 = require("./types");
exports.AslPathValidatorConfig = {
    format_names: {
        [types_1.AslPathContext.PATH]: "asl_path",
        [types_1.AslPathContext.REFERENCE_PATH]: "asl_ref_path",
        [types_1.AslPathContext.PAYLOAD_TEMPLATE]: "asl_payload_template",
    },
    silent: true,
};
const registerAll = (ajv, config = exports.AslPathValidatorConfig) => {
    const validateAdapter = (path, pathType) => {
        const result = (0, index_1.validatePath)(path, pathType);
        if (!config.silent && !result.isValid) {
            ajv.logger.error(`asl_path_validator: code:${result.code}. pathType:${pathType}. input: ${path}`);
        }
        return result.isValid;
    };
    ajv.addFormat(config.format_names[types_1.AslPathContext.REFERENCE_PATH], (path) => {
        return validateAdapter(path, types_1.AslPathContext.REFERENCE_PATH);
    });
    ajv.addFormat(config.format_names[types_1.AslPathContext.PATH], (path) => {
        return validateAdapter(path, types_1.AslPathContext.PATH);
    });
    ajv.addFormat(config.format_names[types_1.AslPathContext.PAYLOAD_TEMPLATE], (path) => {
        return validateAdapter(path, types_1.AslPathContext.PAYLOAD_TEMPLATE);
    });
};
exports.registerAll = registerAll;
//# sourceMappingURL=ajv.js.map