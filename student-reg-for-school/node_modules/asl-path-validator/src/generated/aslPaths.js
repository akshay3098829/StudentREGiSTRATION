// Generated by Peggy 2.0.1.
//
// https://peggyjs.org/

"use strict";

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var loc = this.location.source + ":" + s.line + ":" + s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { jsonpath: peg$parsejsonpath };
  var peg$startRuleFunction = peg$parsejsonpath;

  var peg$c0 = "States.Array";
  var peg$c1 = "States.ArrayPartition";
  var peg$c2 = "States.ArrayContains";
  var peg$c3 = "States.ArrayRange";
  var peg$c4 = "States.ArrayGetItem";
  var peg$c5 = "States.ArrayLength";
  var peg$c6 = "States.ArrayUnique";
  var peg$c7 = "States.Base64Encode";
  var peg$c8 = "States.Base64Decode";
  var peg$c9 = "States.Hash";
  var peg$c10 = "States.JsonMerge";
  var peg$c11 = "States.StringToJson";
  var peg$c12 = "States.JsonToString";
  var peg$c13 = "States.MathRandom";
  var peg$c14 = "States.MathAdd";
  var peg$c15 = "States.StringSplit";
  var peg$c16 = "States.UUID";
  var peg$c17 = "States.Format";
  var peg$c18 = ".length";
  var peg$c19 = "@";
  var peg$c20 = "..";
  var peg$c21 = "$$";
  var peg$c22 = "$";
  var peg$c23 = ".";
  var peg$c24 = "*";
  var peg$c25 = "==";
  var peg$c26 = ">=";
  var peg$c27 = ">";
  var peg$c28 = "<=";
  var peg$c29 = "<";
  var peg$c30 = "-";
  var peg$c31 = "[";
  var peg$c32 = "]";
  var peg$c33 = ",";
  var peg$c34 = "(";
  var peg$c35 = ")";
  var peg$c36 = "?";
  var peg$c37 = ":";
  var peg$c38 = "true";
  var peg$c39 = "false";
  var peg$c40 = "null";
  var peg$c41 = "\\";

  var peg$r0 = /^[0-9]/;
  var peg$r1 = /^[^),'"\\.[\] ><!=]/;
  var peg$r2 = /^[']/;
  var peg$r3 = /^[^'\\]/;
  var peg$r4 = /^["]/;
  var peg$r5 = /^[^"\\]/;
  var peg$r6 = /^[^\\n]/;
  var peg$r7 = /^[ \t\n]/;

  var peg$e0 = peg$literalExpectation("States.Array", false);
  var peg$e1 = peg$literalExpectation("States.ArrayPartition", false);
  var peg$e2 = peg$literalExpectation("States.ArrayContains", false);
  var peg$e3 = peg$literalExpectation("States.ArrayRange", false);
  var peg$e4 = peg$literalExpectation("States.ArrayGetItem", false);
  var peg$e5 = peg$literalExpectation("States.ArrayLength", false);
  var peg$e6 = peg$literalExpectation("States.ArrayUnique", false);
  var peg$e7 = peg$literalExpectation("States.Base64Encode", false);
  var peg$e8 = peg$literalExpectation("States.Base64Decode", false);
  var peg$e9 = peg$literalExpectation("States.Hash", false);
  var peg$e10 = peg$literalExpectation("States.JsonMerge", false);
  var peg$e11 = peg$literalExpectation("States.StringToJson", false);
  var peg$e12 = peg$literalExpectation("States.JsonToString", false);
  var peg$e13 = peg$literalExpectation("States.MathRandom", false);
  var peg$e14 = peg$literalExpectation("States.MathAdd", false);
  var peg$e15 = peg$literalExpectation("States.StringSplit", false);
  var peg$e16 = peg$literalExpectation("States.UUID", false);
  var peg$e17 = peg$literalExpectation("States.Format", false);
  var peg$e18 = peg$literalExpectation(".length", false);
  var peg$e19 = peg$literalExpectation("@", false);
  var peg$e20 = peg$literalExpectation("..", false);
  var peg$e21 = peg$literalExpectation("$$", false);
  var peg$e22 = peg$literalExpectation("$", false);
  var peg$e23 = peg$literalExpectation(".", false);
  var peg$e24 = peg$literalExpectation("*", false);
  var peg$e25 = peg$literalExpectation("==", false);
  var peg$e26 = peg$literalExpectation(">=", false);
  var peg$e27 = peg$literalExpectation(">", false);
  var peg$e28 = peg$literalExpectation("<=", false);
  var peg$e29 = peg$literalExpectation("<", false);
  var peg$e30 = peg$literalExpectation("-", false);
  var peg$e31 = peg$literalExpectation("[", false);
  var peg$e32 = peg$literalExpectation("]", false);
  var peg$e33 = peg$literalExpectation(",", false);
  var peg$e34 = peg$literalExpectation("(", false);
  var peg$e35 = peg$literalExpectation(")", false);
  var peg$e36 = peg$literalExpectation("?", false);
  var peg$e37 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e38 = peg$literalExpectation(":", false);
  var peg$e39 = peg$literalExpectation("true", false);
  var peg$e40 = peg$literalExpectation("false", false);
  var peg$e41 = peg$literalExpectation("null", false);
  var peg$e42 = peg$classExpectation([")", ",", "'", "\"", "\\", ".", "[", "]", " ", ">", "<", "!", "="], true, false);
  var peg$e43 = peg$classExpectation(["'"], false, false);
  var peg$e44 = peg$classExpectation(["'", "\\"], true, false);
  var peg$e45 = peg$classExpectation(["\""], false, false);
  var peg$e46 = peg$classExpectation(["\"", "\\"], true, false);
  var peg$e47 = peg$literalExpectation("\\", false);
  var peg$e48 = peg$classExpectation(["\\", "n"], true, false);
  var peg$e49 = peg$otherExpectation("whitespace");
  var peg$e50 = peg$classExpectation([" ", "\t", "\n"], false, false);

  var peg$f0 = function(sub) {return {node: "$$", sub, isRoot:true}};
  var peg$f1 = function(sub) {return {node: "$", sub, isRoot:true}};
  var peg$f2 = function(sub) {return {node: "$$", sub}};
  var peg$f3 = function(sub) {return {node: "$", sub}};
  var peg$f4 = function(sub) {return {node: "@", sub, atmark: true}};
  var peg$f5 = function(id, sub) {return {axis: "..", id, sub, recursiveDescent: true}};
  var peg$f6 = function(brackets, sub) {return {axis: "..", brackets, sub, recursiveDescent: true}};
  var peg$f7 = function(sub) {return {axis: ".", wildcard: true, sub}};
  var peg$f8 = function(id, sub) {return {axis: ".", id, sub}};
  var peg$f9 = function(brackets, sub) {return {axis: ".", brackets, sub}};
  var peg$f10 = function(head) { return {head}};
  var peg$f11 = function() { return {wildcard: true}};
  var peg$f12 = function(minus, head, tail) {
        const negOffset = (minus === '-') || tail.some((t) => t[2]);
        const result = {
            head: minus === '-'? -head : head
        };
        if (tail.length >0 ) {
        	result.tail = tail.map((t) => t[2] === '-'? -t[3] : t[3]);
            result.multipleIndex = true;
        }
        if (negOffset) {
        	result.negOffset = true;
        }
        return result;
     };
  var peg$f13 = function(func, args) {return {func, args}};
  var peg$f14 = function(func, args) {return {func, args}};
  var peg$f15 = function(func, args) {return {func, args}};
  var peg$f16 = function(func, args) {return {func, args}};
  var peg$f17 = function(func, args) {return {func, args}};
  var peg$f18 = function(func, args) {return {func, args}};
  var peg$f19 = function(func, args) {return {func, args}};
  var peg$f20 = function(func, args) {return {func, args}};
  var peg$f21 = function(func, args) {return {func, args}};
  var peg$f22 = function(func, args) {return {func, args}};
  var peg$f23 = function(func, args) {return {func, args}};
  var peg$f24 = function(func, args) {return {func, args}};
  var peg$f25 = function(func, args) {return {func, args}};
  var peg$f26 = function(func, args) {return {func, args}};
  var peg$f27 = function(func, args) {return {func, args}};
  var peg$f28 = function(func, args) {return {func, args}};
  var peg$f29 = function(func, args) {return {func, args}};
  var peg$f30 = function(func, args) {return {func, args}};
  var peg$f31 = function() {return {
   	head: null,
    tail: [] }
   };
  var peg$f32 = function(head) {return {
   	head,
    tail: [] }
   };
  var peg$f33 = function() { return []};
  var peg$f34 = function(head, tail) {return {
   	head,
    tail: tail.map((t) => t[2]) }
   };
  var peg$f35 = function(start, end) {return {start, end, slice:true}};
  var peg$f36 = function(start) {return {start:start, end:null, slice: true}};
  var peg$f37 = function(end) {return {start:null, end, slice: true}};
  var peg$f38 = function(exp) {return {exp, filter: true}};
  var peg$f39 = function(offset) {return {node:"@", offset: -offset, atmark: true}};
  var peg$f40 = function(exp) {return {exp}};
  var peg$f41 = function(path, op, minus, val) {return {path, op, val: minus==='-'?-val:val}};
  var peg$f42 = function(v) {return v.join('')};
  var peg$f43 = function(v) {return v.join("")};
  var peg$f44 = function(v) {return v.join("")};
  var peg$f45 = function(c) { return c; };
  var peg$currPos = 0;
  var peg$savedPos = 0;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = 0;
  var peg$maxFailExpected = [];
  var peg$silentFails = 0;

  var peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    return {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsejsonpath() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseCONTEXT_ROOT_VALUE();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsesubscript();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f0(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseROOT_VALUE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesubscript();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s3 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f1(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseintrinsic_function();
      }
    }

    return s0;
  }

  function peg$parsejsonpath_() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseCONTEXT_ROOT_VALUE();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsesubscript();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f2(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseROOT_VALUE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesubscript();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f3(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseCURRENT_VALUE();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsesubscript();
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f4(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseintrinsic_function();
        }
      }
    }

    return s0;
  }

  function peg$parsejsonpath__() {
    var s0;

    s0 = peg$parsejsonpath_();
    if (s0 === peg$FAILED) {
      s0 = peg$parsevalue();
    }

    return s0;
  }

  function peg$parsesubscript() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseRECURSIVE_DESCENT();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsesubscriptableBareword();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesubscript();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f5(s2, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseRECURSIVE_DESCENT();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesubscriptables();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesubscript();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f6(s2, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSUBSCRIPT();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseWILDCARD_SUBSCRIPT();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsesubscript();
            if (s3 === peg$FAILED) {
              s3 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f7(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseSUBSCRIPT();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsesubscriptableBareword();
            if (s2 !== peg$FAILED) {
              s3 = peg$parsesubscript();
              if (s3 === peg$FAILED) {
                s3 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f8(s2, s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsesubscriptables();
            if (s1 !== peg$FAILED) {
              s2 = peg$parsesubscript();
              if (s2 === peg$FAILED) {
                s2 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f9(s1, s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsesubscriptables() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = peg$parseBRACKET_LEFT();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsesubscriptable();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseBRACKET_RIGHT();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f10(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseBRACKET_LEFT();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseWILDCARD_SUBSCRIPT();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseBRACKET_RIGHT();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f11();
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseBRACKET_LEFT();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseMINUS();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          s4 = peg$parseNUMBER();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            s6 = [];
            s7 = peg$currPos;
            s8 = peg$parseCOMMA();
            if (s8 !== peg$FAILED) {
              s9 = peg$parse_();
              s10 = peg$parseMINUS();
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              s11 = peg$parseNUMBER();
              if (s11 !== peg$FAILED) {
                s8 = [s8, s9, s10, s11];
                s7 = s8;
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$currPos;
              s8 = peg$parseCOMMA();
              if (s8 !== peg$FAILED) {
                s9 = peg$parse_();
                s10 = peg$parseMINUS();
                if (s10 === peg$FAILED) {
                  s10 = null;
                }
                s11 = peg$parseNUMBER();
                if (s11 !== peg$FAILED) {
                  s8 = [s8, s9, s10, s11];
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            }
            s7 = peg$parse_();
            s8 = peg$parseBRACKET_RIGHT();
            if (s8 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f12(s3, s4, s6);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parsesubscriptableBareword() {
    var s0;

    s0 = peg$parseID();

    return s0;
  }

  function peg$parseintrinsic_function() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 12) === peg$c0) {
      s1 = peg$c0;
      peg$currPos += 12;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsefunction_args();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f13(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 21) === peg$c1) {
        s1 = peg$c1;
        peg$currPos += 21;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsefunction_args();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f14(s1, s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 20) === peg$c2) {
          s1 = peg$c2;
          peg$currPos += 20;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e2); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsefunction_args();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f15(s1, s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 17) === peg$c3) {
            s1 = peg$c3;
            peg$currPos += 17;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsefunction_args();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f16(s1, s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 19) === peg$c4) {
              s1 = peg$c4;
              peg$currPos += 19;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e4); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsefunction_args();
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f17(s1, s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 18) === peg$c5) {
                s1 = peg$c5;
                peg$currPos += 18;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e5); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parsesingle_arg();
                if (s2 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f18(s1, s2);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 18) === peg$c6) {
                  s1 = peg$c6;
                  peg$currPos += 18;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e6); }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parsesingle_arg();
                  if (s2 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f19(s1, s2);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 19) === peg$c7) {
                    s1 = peg$c7;
                    peg$currPos += 19;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e7); }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parsesingle_arg();
                    if (s2 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f20(s1, s2);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 19) === peg$c8) {
                      s1 = peg$c8;
                      peg$currPos += 19;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e8); }
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parsesingle_arg();
                      if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f21(s1, s2);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 11) === peg$c9) {
                        s1 = peg$c9;
                        peg$currPos += 11;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e9); }
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parsefunction_args();
                        if (s2 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s0 = peg$f22(s1, s2);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 16) === peg$c10) {
                          s1 = peg$c10;
                          peg$currPos += 16;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e10); }
                        }
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parsefunction_args();
                          if (s2 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s0 = peg$f23(s1, s2);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          if (input.substr(peg$currPos, 19) === peg$c11) {
                            s1 = peg$c11;
                            peg$currPos += 19;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e11); }
                          }
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parsesingle_arg();
                            if (s2 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s0 = peg$f24(s1, s2);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.substr(peg$currPos, 19) === peg$c12) {
                              s1 = peg$c12;
                              peg$currPos += 19;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e12); }
                            }
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parsesingle_arg();
                              if (s2 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s0 = peg$f25(s1, s2);
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              if (input.substr(peg$currPos, 17) === peg$c13) {
                                s1 = peg$c13;
                                peg$currPos += 17;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e13); }
                              }
                              if (s1 !== peg$FAILED) {
                                s2 = peg$parsefunction_args();
                                if (s2 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s0 = peg$f26(s1, s2);
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                if (input.substr(peg$currPos, 14) === peg$c14) {
                                  s1 = peg$c14;
                                  peg$currPos += 14;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e14); }
                                }
                                if (s1 !== peg$FAILED) {
                                  s2 = peg$parsefunction_args();
                                  if (s2 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s0 = peg$f27(s1, s2);
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  if (input.substr(peg$currPos, 18) === peg$c15) {
                                    s1 = peg$c15;
                                    peg$currPos += 18;
                                  } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e15); }
                                  }
                                  if (s1 !== peg$FAILED) {
                                    s2 = peg$parsefunction_args();
                                    if (s2 !== peg$FAILED) {
                                      peg$savedPos = s0;
                                      s0 = peg$f28(s1, s2);
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    if (input.substr(peg$currPos, 11) === peg$c16) {
                                      s1 = peg$c16;
                                      peg$currPos += 11;
                                    } else {
                                      s1 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e16); }
                                    }
                                    if (s1 !== peg$FAILED) {
                                      s2 = peg$parseno_args();
                                      if (s2 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s0 = peg$f29(s1, s2);
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      if (input.substr(peg$currPos, 13) === peg$c17) {
                                        s1 = peg$c17;
                                        peg$currPos += 13;
                                      } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e17); }
                                      }
                                      if (s1 !== peg$FAILED) {
                                        s2 = peg$parsefunction_args();
                                        if (s2 !== peg$FAILED) {
                                          peg$savedPos = s0;
                                          s0 = peg$f30(s1, s2);
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseno_args() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsePAREN_LEFT();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsePAREN_RIGHT();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f31();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesingle_arg() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsePAREN_LEFT();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsejsonpath__();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parsePAREN_RIGHT();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f32(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefunction_args() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parsePAREN_LEFT();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsePAREN_RIGHT();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f33();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsePAREN_LEFT();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parsejsonpath__();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = [];
          s6 = peg$currPos;
          s7 = peg$parseCOMMA();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parsejsonpath__();
            if (s9 !== peg$FAILED) {
              s7 = [s7, s8, s9];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$currPos;
            s7 = peg$parseCOMMA();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              s9 = peg$parsejsonpath__();
              if (s9 !== peg$FAILED) {
                s7 = [s7, s8, s9];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          }
          s6 = peg$parse_();
          s7 = peg$parsePAREN_RIGHT();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f34(s3, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsesubscriptable() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$parseSTRING();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseMINUS();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      s2 = peg$parseNUMBER();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCOLON();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseMINUS();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s5 = peg$parseNUMBER();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f35(s2, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseMINUS();
        if (s1 === peg$FAILED) {
          s1 = null;
        }
        s2 = peg$parseNUMBER();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCOLON();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f36(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseCOLON();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseMINUS();
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            s3 = peg$parseNUMBER();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f37(s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$parseNUMBER();
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseQUESTION();
              if (s1 !== peg$FAILED) {
                s2 = peg$parsePAREN_LEFT();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parse_();
                  s4 = peg$parseexpression_();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parse_();
                    s6 = peg$parsePAREN_RIGHT();
                    if (s6 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f38(s4);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsePAREN_LEFT();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parse_();
                  s3 = peg$parseCURRENT_VALUE();
                  if (s3 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 7) === peg$c18) {
                      s4 = peg$c18;
                      peg$currPos += 7;
                    } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e18); }
                    }
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parse_();
                      s6 = peg$parseMINUS();
                      if (s6 !== peg$FAILED) {
                        s7 = peg$parse_();
                        s8 = peg$parseNUMBER();
                        if (s8 !== peg$FAILED) {
                          s9 = peg$parse_();
                          s10 = peg$parsePAREN_RIGHT();
                          if (s10 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s0 = peg$f39(s8);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$parsejsonpath_();
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseexpression_() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parsePAREN_LEFT();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseexpression_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parsePAREN_RIGHT();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f40(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsejsonpath__();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parsecomparison_op();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseMINUS();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s6 = peg$parseNUMBER();
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f41(s1, s3, s5, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsejsonpath__();
      }
    }

    return s0;
  }

  function peg$parsecomparison_op() {
    var s0;

    s0 = peg$parseEQ();
    if (s0 === peg$FAILED) {
      s0 = peg$parseLE();
      if (s0 === peg$FAILED) {
        s0 = peg$parseLT();
        if (s0 === peg$FAILED) {
          s0 = peg$parseGE();
          if (s0 === peg$FAILED) {
            s0 = peg$parseGT();
          }
        }
      }
    }

    return s0;
  }

  function peg$parsevalue() {
    var s0;

    s0 = peg$parseSTRING();
    if (s0 === peg$FAILED) {
      s0 = peg$parseNUMBER();
      if (s0 === peg$FAILED) {
        s0 = peg$parseTRUE();
        if (s0 === peg$FAILED) {
          s0 = peg$parseFALSE();
          if (s0 === peg$FAILED) {
            s0 = peg$parseNULL();
          }
        }
      }
    }

    return s0;
  }

  function peg$parseCURRENT_VALUE() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 64) {
      s0 = peg$c19;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }

    return s0;
  }

  function peg$parseRECURSIVE_DESCENT() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c20) {
      s0 = peg$c20;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }

    return s0;
  }

  function peg$parseCONTEXT_ROOT_VALUE() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c21) {
      s0 = peg$c21;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }

    return s0;
  }

  function peg$parseROOT_VALUE() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 36) {
      s0 = peg$c22;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }

    return s0;
  }

  function peg$parseSUBSCRIPT() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 46) {
      s0 = peg$c23;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e23); }
    }

    return s0;
  }

  function peg$parseWILDCARD_SUBSCRIPT() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 42) {
      s0 = peg$c24;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }

    return s0;
  }

  function peg$parseEQ() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c25) {
      s0 = peg$c25;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e25); }
    }

    return s0;
  }

  function peg$parseGE() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c26) {
      s0 = peg$c26;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e26); }
    }

    return s0;
  }

  function peg$parseGT() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 62) {
      s0 = peg$c27;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e27); }
    }

    return s0;
  }

  function peg$parseLE() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c28) {
      s0 = peg$c28;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e28); }
    }

    return s0;
  }

  function peg$parseLT() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 60) {
      s0 = peg$c29;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e29); }
    }

    return s0;
  }

  function peg$parseMINUS() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 45) {
      s0 = peg$c30;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e30); }
    }

    return s0;
  }

  function peg$parseBRACKET_LEFT() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 91) {
      s0 = peg$c31;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }

    return s0;
  }

  function peg$parseBRACKET_RIGHT() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 93) {
      s0 = peg$c32;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e32); }
    }

    return s0;
  }

  function peg$parseCOMMA() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 44) {
      s0 = peg$c33;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }

    return s0;
  }

  function peg$parsePAREN_LEFT() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 40) {
      s0 = peg$c34;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }

    return s0;
  }

  function peg$parsePAREN_RIGHT() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 41) {
      s0 = peg$c35;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e35); }
    }

    return s0;
  }

  function peg$parseQUESTION() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 63) {
      s0 = peg$c36;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }

    return s0;
  }

  function peg$parseNUMBER() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$r0.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$r0.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e37); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parseCOLON() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 58) {
      s0 = peg$c37;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e38); }
    }

    return s0;
  }

  function peg$parseTRUE() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c38) {
      s0 = peg$c38;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e39); }
    }

    return s0;
  }

  function peg$parseFALSE() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c39) {
      s0 = peg$c39;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e40); }
    }

    return s0;
  }

  function peg$parseNULL() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c40) {
      s0 = peg$c40;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e41); }
    }

    return s0;
  }

  function peg$parseID() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseescaped();
    if (s2 === peg$FAILED) {
      if (peg$r1.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e42); }
      }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseescaped();
      if (s2 === peg$FAILED) {
        if (peg$r1.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e42); }
        }
      }
    }
    peg$savedPos = s0;
    s1 = peg$f42(s1);
    s0 = s1;

    return s0;
  }

  function peg$parseSTRING() {
    var s0;

    s0 = peg$parsesinglequoted();
    if (s0 === peg$FAILED) {
      s0 = peg$parsedoublequoted();
    }

    return s0;
  }

  function peg$parsesinglequoted() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (peg$r2.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e43); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseescaped();
      if (s3 === peg$FAILED) {
        if (peg$r3.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e44); }
        }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseescaped();
        if (s3 === peg$FAILED) {
          if (peg$r3.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e44); }
          }
        }
      }
      if (peg$r2.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e43); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f43(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedoublequoted() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (peg$r4.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e45); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseescaped();
      if (s3 === peg$FAILED) {
        if (peg$r5.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e46); }
        }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseescaped();
        if (s3 === peg$FAILED) {
          if (peg$r5.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e46); }
          }
        }
      }
      if (peg$r4.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e45); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f44(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseescaped() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 92) {
      s1 = peg$c41;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseallchars();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f45(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseallchars() {
    var s0, s1;

    s0 = peg$currPos;
    if (peg$r6.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e48); }
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    if (peg$r7.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e50); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (peg$r7.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e50); }
      }
    }
    peg$silentFails--;
    s1 = peg$FAILED;
    if (peg$silentFails === 0) { peg$fail(peg$e49); }

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse: peg$parse
};
